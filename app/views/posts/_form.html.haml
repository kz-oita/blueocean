.form__field
  = form.label :タイトル
  %span.field-label__require 必須
  %br
  = form.text_field :title, placeholder: '例)感動！石垣島で初マンタ', class: 'form__field__title'
.form__field
  = form.label :投稿内容
  %span.field-label__require 必須
  %br
  = form.text_area :text, class: 'form__field__text'
.form__field
  = form.label :写真
  %span.field-label__require 必須
  %br
  .field-input
    #image-box
      #previews
        - if @post.persisted?
          - @post.images.each_with_index do |image, i|
            = image_tag image.src.url, data: { index: i }, width: "100", height: '100'
        = form.fields_for :images do |image|
          .js-file_group{"data-index" => "#{image.index}"}
            = image.file_field :src, class: 'js-file'
            %br/
            %span.js-remove 削除
          - if @post.persisted?
            = image.check_box :_destroy, data:{ index: image.index }, class: 'hidden-destroy'
        - if @post.persisted?
          .js-file_group{"data-index" => "#{@post.images.count}"}
            = file_field_tag :src, name: "post[images_attributes][#{@post.images.count}][src]", class: 'js-file'
            .js-remove 削除


.form__field
  = form.label :タグ（カンマで区切る）
  %span.field-label__hoge 任意
  %br
  = form.text_field :tag_list, value: @post.tag_list.join(','), placeholder: '例)沖縄,石垣島', class: 'form__field__tag'
= form.submit '投稿する', class: 'form__field__btn'




:javascript
  $(document).on('turbolinks:load', ()=> {
    // 画像用のinputを生成する関数
    const buildFileField = (num)=> {
      const html = `<div data-index="${num}" class="js-file_group">
                      <input class="js-file" type="file"
                      name="post[images_attributes][${num}][src]"
                      id="post_images_attributes_${num}_src"><br>
                      <div class="js-remove">削除</div>
                    </div>`;
      return html;
    }
    // プレビュー用のimgタグを生成する関数
    const buildImg = (index, url)=> {
      const html = `<img data-index="${index}" src="${url}" width="100px" height="100px">`;
      return html;
    }

    // file_fieldのnameに動的なindexをつける為の配列
    let fileIndex = [1,2,3,4,5,6,7,8,9,10];
    // 既に使われているindexを除外
    lastIndex = $('.js-file_group:last').data('index');
    fileIndex.splice(0, lastIndex);

    $('.hidden-destroy').hide();

    $('#image-box').on('change', '.js-file', function(e) {
      const targetIndex = $(this).parent().data('index');
      // ファイルのブラウザ上でのURLを取得する
      const file = e.target.files[0];
      const blobUrl = window.URL.createObjectURL(file);

      // 該当indexを持つimgがあれば取得して変数imgに入れる(画像変更の処理)
      if (img = $(`img[data-index="${targetIndex}"]`)[0]) {
        img.setAttribute('src', blobUrl);
      } else {  // 新規画像追加の処理
        $('#previews').append(buildImg(targetIndex, blobUrl));
        // fileIndexの先頭の数字を使ってinputを作る
        $('#image-box').append(buildFileField(fileIndex[0]));
        fileIndex.shift();
        // 末尾の数に1足した数を追加する
        fileIndex.push(fileIndex[fileIndex.length - 1] + 1);
      }
    });

    $('#image-box').on('click', '.js-remove', function() {
      const targetIndex = $(this).parent().data('index');
      // 該当indexを振られているチェックボックスを取得する
      const hiddenCheck = $(`input[data-index="${targetIndex}"].hidden-destroy`);
      // もしチェックボックスが存在すればチェックを入れる
      if (hiddenCheck) hiddenCheck.prop('checked', true);

      $(this).parent().remove();
      $(`img[data-index="${targetIndex}"]`).remove();

      // 画像入力欄が0個にならないようにしておく
      if ($('.js-file').length == 0) $('#image-box').append(buildFileField(fileIndex[0]));
    });
  });